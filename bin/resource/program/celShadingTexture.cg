struct a2v
{
    float4 Position : POSITION; //in object space
    float3 Normal : NORMAL;
	float2 TexCoords : TEXCOORD0;
};

struct v2f
{
    float4 Position : POSITION; //in projection space
    float FogAmount : COLOR;
    float2 TexCoords : TEXCOORD0;
    float Scale : TEXCOORD1;
};

struct light
{
    float4 position;
    float4 diffuseColour;
    float4 attenuation;
};

float4 fragment(v2f IN, uniform sampler2D colourMap : TEXUNIT0, uniform float shades, uniform float3 fogColor) : COLOR
{
	float3 color;
	
	// Cel Shading
	int scalefactor = floor(IN.Scale * shades) + 1;
	IN.Scale = scalefactor / shades;

	color = tex2D(colourMap, IN.TexCoords).rgb;
	color *= (float3(1.0f, 1.0f, 1.0f) * IN.Scale) + (float3(1.0f, 1.0f, 1.0f) / shades);

	return float4(lerp(color, fogColor, IN.FogAmount), 1.0);
}

v2f vertex(a2v IN, float4x4 world, float4x4 viewProj, float4 ambient, float4 camera, float4 fogParams, float shininess)
{
    v2f OUT;
	
	IN.Normal = mul((float3x3)world, IN.Normal);
	IN.Normal = normalize(IN.Normal);

    OUT.Position = mul(world, IN.Position);
	OUT.TexCoords = IN.TexCoords;
	
	/* Lighting
	OUT.Color = float3(0.0, 0.0, 0.0);
    for(int lightCt = 0; lightCt < iNoOfLights; lightCt++)
    {
		float3 L = normalize(lights[lightCt].position.xyz - OUT.Position.xyz);
		
		//Calculate attenuation factor.
		float d = distance(lights[lightCt].position.xyz, OUT.Position.xyz);
		float attenuationFactor = 1.0 / (lights[lightCt].attenuation.y + lights[lightCt].attenuation.z * d + lights[lightCt].attenuation.w * d * d);
		
		// Calculate diffuse component
		float LdotN = max(dot(L, IN.Normal) , 0);
		OUT.Color.rgb += lights[lightCt].diffuseColour.rgb * LdotN * attenuationFactor;
    }
	OUT.Color.rgb += ambient.rgb;
	*/
	
	// Cel Shading
	//float3 eye = (float3)normalize(lights[0].position - OUT.Position);
	const float3 eye = float3(0, 0.957826285, -0.287347886);
	OUT.Scale = max(0, dot(IN.Normal, eye));
	OUT.Scale *= shininess;
	
    // Fog
    float dist = length(OUT.Position - camera);
    OUT.FogAmount = max((dist - fogParams.y) * fogParams.w, 0);
	
    OUT.Position = mul(viewProj, OUT.Position);

    return OUT;
}

v2f vertex_Entry(a2v IN,uniform float4x4 world, uniform float4x4 viewProj, uniform float4 ambient, uniform float4 camera, uniform float4 fogParams, uniform float shininess)
{
    return vertex(IN, world, viewProj, ambient, camera, fogParams, shininess);
}
/*
v2f vertex_TwoLights(a2v IN,uniform float4x4 world, uniform float4x4 viewProj, uniform float4 ambient, uniform float4 camera, uniform float4 fogParams, uniform light light0, uniform light light1)
{   
    light lights[4];
    lights[0] = light0;
    lights[1] = light1;
    
    return vertex(IN, world, viewProj, ambient, camera, fogParams, 2, lights);
}

v2f vertex_ThreeLights(a2v IN,uniform float4x4 world, uniform float4x4 viewProj, uniform float4 ambient, uniform float4 camera, uniform float4 fogParams, uniform light light0, uniform light light1, uniform light light2)
{   
    light lights[4];
    lights[0] = light0;
    lights[1] = light1;
    lights[2] = light2;
    
    return vertex(IN, world, viewProj, ambient, camera, fogParams, 3, lights);
}

v2f vertex_FourLights(a2v IN,uniform float4x4 world, uniform float4x4 viewProj, uniform float4 ambient, uniform float4 camera, uniform float4 fogParams, uniform light light0, uniform light light1, uniform light light2, uniform light light3)
{   
    light lights[4];
    lights[0] = light0;
    lights[1] = light1;
    lights[2] = light2;
    lights[3] = light3;
    
    return vertex(IN, world, viewProj, ambient, camera, fogParams, 4, lights);
}
*/
