/*****************************************************************************************

Forever War - a NetHack-like FPS

Copyright (C) 2008 Thomas Sch√∂ps

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software Foundation;
either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program;
if not, see <http://www.gnu.org/licenses/>.

*****************************************************************************************/

#ifndef _BLOCK_FULL_H_
#define _BLOCK_FULL_H_

#include "OgrePrerequisites.h"
#include "OgreVector3.h"
using namespace Ogre;
#include "block.h"
#include "blockConstants.h"

class VoxelBlockLoaded;

/// Replaces a VoxelBlockLoaded if the block is completely filled - in this case, no voxel data needs to be stored (textures are still stored). Is generated by VoxelVolume::checkBlock
class VoxelBlockFull : public VoxelBlock
{
public:
	/// Texture values
	unsigned char texture[NUM_VOXELS_IN_BLOCK];

	/// Contructor
	VoxelBlockFull(int blockX, int blockY, int blockZ, VoxelVolume* volume, VoxelBlockPersistent* persistent, VoxelBlockLoaded* texSource);
	~VoxelBlockFull();

	virtual int typeID() {return 2;}

	// Voxel editing functions
	virtual void fill(char value);

	virtual char getVoxelAt(int xPosition, int yPosition, int zPosition);
	virtual void setVoxelAt(int xPosition, int yPosition, int zPosition, const char value);

	virtual unsigned char getTextureAt(int xPosition, int yPosition, int zPosition)						{return _getTextureAt(xPosition, yPosition, zPosition);}
	virtual void setTextureAt(int xPosition, int yPosition, int zPosition, const unsigned char value)	{_setTextureAt(xPosition, yPosition, zPosition, value);}

	inline unsigned char _getTextureAt(int xPosition, int yPosition, int zPosition)
	{
		return texture[xPosition +
				yPosition * BLOCK_SIDE_LENGTH +
				zPosition * BLOCK_SIDE_LENGTH * BLOCK_SIDE_LENGTH];
	}
	inline void _setTextureAt(int xPosition, int yPosition, int zPosition, const unsigned char value)
	{
		texture[xPosition +
				yPosition * BLOCK_SIDE_LENGTH +
				zPosition * BLOCK_SIDE_LENGTH * BLOCK_SIDE_LENGTH] = value;
	}
};

#endif
